Semaphore: содержит количество permit-ов, перед работой запрашивается acquire, после выполнения возвращается permit с помощью release

CountDownLatch: такой счётчик — одноразовый. задается стартовый счетчик. countDown - отнять от счетчика, await - ждать, пока счетчик не станет равным нулю.

CyclicBarrier: await, то есть ожидает. При этом уменьшается значение барьера. Барьер считается сломанным (berrier.isBroken()), когда отсчёт дошёл до нуля. Чтобы сбросить барьер, нужно вызвать berrier.reset()

Exchanger: 2 потока. Каждый из них выполняет метод exchange и ожидает, когда другой поток так жевыполнит метод exchange. Таким образом, потоки обменяются между собой переданными аргументами. Похоже на SynchronousQueue, которая хранит 0 значений (т.е поток положил в нее значение и ждет, пока другой его заберет)

Phaser: можно указать количество изначальных регистраций, или добавить новый поток в регистр. (например, Phaser(4) означает, что нужно, чтобы к фазеру прибыло 4 потока, как в барьере) arrive - уменьшить каунтер барьера. arriveAndDeregister - выпустить все потоки и уменьший общий каунтер.