sleeping: поток текущий спит Thread.sleep(time) 
wait: thread.join() - текущий поток ждет завершение указанного потока. wait() выполняется на объекте, на мониторе которого мы хотим выполнить ожидание. то есть если вызвать в нестатическом синхронизированном методе метод wait(), то wait будет вызван на this (this.wait())
park: похоже на wait, но это состояние реализуется посредством ожидания разрешения на получение permit от симафора, LockerSupporta
monitor: если поток не может зайти в sync, то он будет ожидать, пока не освободится монитор. а потом захватит его

Happens-before - это концепция в Java Memory Model, которая определяет отношения порядка между операциями чтения и записи в многопоточном приложении. Happens-before гарантирует, что если операция A happens-before операции B, то любое изменение значения, выполненное в операции A, будет видно операции B.


Callable: возвращает результат

LockSupport: используется для блокировок с помощью методов lock(), unlock()

Future (interface) -> CompletableFuture & FutureTask (classes that are used to run tasks and get the result when it is done)

CompletableFuture: 
run (Runnable), apply (Function), accept (Consumer), supply (Supplier). 
Чтобы запустить в отдельном потоке нужно использовать acync, по умолчанию потоки будут демон-потоками.
completedFuture - создать future со значением в том же потоке


Executor: интерфейс для запуска runnable
		Executor executor = (runnable) -> {
			new Thread(runnable).start();
		};

ExecutorService (интерфейс): особый Executor, который имеет набор возможностей по управлению ходом выполнения. Из него можно получить Future. По сути это блокирующая очередь, в которую помещаются задачи и из которой эти задачи выполняются.

Executors: фабрика, которая позволяет создавать ExecutorService

ThreadPoolExecutor: реализация ExecutorService. В нем хранится пулл потоков, которые выполняют засабмиченные задачи. 
	CachedThreadPool (подвид): автоматически масштабирует количество потоков исполнения в зависимости от количества задач, которые нужно выполнить.

ScheduledExecutorService: ExecutorService выполняющий задачи по расписанию

ForkJoinPool (WorkStealingPool - название): потоки не простаивают на wait, а выполняют задачи из очереди или других потоков. По умолчанию являются демон потоками, в отличие от потоков, созданных через обычный ThreadPool. ForkJoinPool оперирует в своей работе таким понятием как RecursiveTask (похож на Callable). Также есть аналог — RecursiveAction похож на Runnable. Метод fork запускает асинхронно в отдельном потоке некоторую задачу. А метод join позволяет дождаться завершения выполнения работы.

SingleThreadExecutor: Executor, который  использует один поток для выполнения всех задач.

оптиместическая блокировка: Когда два потока хотят изменить одни и те же данные, потоки копируют эти данные в свою локальную память, затем меняют их и пытаются отправить измененные данные в основную память. Перед внесением изменений в основную память проверяется версия данных или предыдущее значение данных. Если проверка не проходит, то поток снова копирует к себе уже новые данные, вносит в них изменения и снова пытается отправить эти измененные данные в основную память.

пессимистическая блокировка: захват ресурса.
